// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts"

export class CodeAddressUpdated extends ethereum.Event {
  get params(): CodeAddressUpdated__Params {
    return new CodeAddressUpdated__Params(this)
  }
}

export class CodeAddressUpdated__Params {
  _event: CodeAddressUpdated

  constructor(event: CodeAddressUpdated) {
    this._event = event
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class CollateralClaimed extends ethereum.Event {
  get params(): CollateralClaimed__Params {
    return new CollateralClaimed__Params(this)
  }
}

export class CollateralClaimed__Params {
  _event: CollateralClaimed

  constructor(event: CollateralClaimed) {
    this._event = event
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class FeePaid extends ethereum.Event {
  get params(): FeePaid__Params {
    return new FeePaid__Params(this)
  }
}

export class FeePaid__Params {
  _event: FeePaid

  constructor(event: FeePaid) {
    this._event = event
  }

  get feeType(): i32 {
    return this._event.parameters[0].value.toI32()
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class MarketDestroyed extends ethereum.Event {
  get params(): MarketDestroyed__Params {
    return new MarketDestroyed__Params(this)
  }
}

export class MarketDestroyed__Params {
  _event: MarketDestroyed

  constructor(event: MarketDestroyed) {
    this._event = event
  }
}

export class MarketInitialized extends ethereum.Event {
  get params(): MarketInitialized__Params {
    return new MarketInitialized__Params(this)
  }
}

export class MarketInitialized__Params {
  _event: MarketInitialized

  constructor(event: MarketInitialized) {
    this._event = event
  }

  get marketName(): string {
    return this._event.parameters[0].value.toString()
  }

  get marketStyle(): i32 {
    return this._event.parameters[1].value.toI32()
  }

  get wToken(): Address {
    return this._event.parameters[2].value.toAddress()
  }

  get bToken(): Address {
    return this._event.parameters[3].value.toAddress()
  }
}

export class OptionClosed extends ethereum.Event {
  get params(): OptionClosed__Params {
    return new OptionClosed__Params(this)
  }
}

export class OptionClosed__Params {
  _event: OptionClosed

  constructor(event: OptionClosed) {
    this._event = event
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class OptionExercised extends ethereum.Event {
  get params(): OptionExercised__Params {
    return new OptionExercised__Params(this)
  }
}

export class OptionExercised__Params {
  _event: OptionExercised

  constructor(event: OptionExercised) {
    this._event = event
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class OptionMinted extends ethereum.Event {
  get params(): OptionMinted__Params {
    return new OptionMinted__Params(this)
  }
}

export class OptionMinted__Params {
  _event: OptionMinted

  constructor(event: OptionMinted) {
    this._event = event
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt()
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this)
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred

  constructor(event: OwnershipTransferred) {
    this._event = event
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class RestrictedMinterUpdated extends ethereum.Event {
  get params(): RestrictedMinterUpdated__Params {
    return new RestrictedMinterUpdated__Params(this)
  }
}

export class RestrictedMinterUpdated__Params {
  _event: RestrictedMinterUpdated

  constructor(event: RestrictedMinterUpdated) {
    this._event = event
  }

  get newRestrictedMinter(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class TokensRecovered extends ethereum.Event {
  get params(): TokensRecovered__Params {
    return new TokensRecovered__Params(this)
  }
}

export class TokensRecovered__Params {
  _event: TokensRecovered

  constructor(event: TokensRecovered) {
    this._event = event
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class Market extends ethereum.SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address)
  }

  bToken(): Address {
    let result = super.call("bToken", "bToken():(address)", [])

    return result[0].toAddress()
  }

  try_bToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("bToken", "bToken():(address)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  claimFeeBasisPoints(): i32 {
    let result = super.call(
      "claimFeeBasisPoints",
      "claimFeeBasisPoints():(uint16)",
      [],
    )

    return result[0].toI32()
  }

  try_claimFeeBasisPoints(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "claimFeeBasisPoints",
      "claimFeeBasisPoints():(uint16)",
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  closeFeeBasisPoints(): i32 {
    let result = super.call(
      "closeFeeBasisPoints",
      "closeFeeBasisPoints():(uint16)",
      [],
    )

    return result[0].toI32()
  }

  try_closeFeeBasisPoints(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "closeFeeBasisPoints",
      "closeFeeBasisPoints():(uint16)",
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  collateralToken(): Address {
    let result = super.call(
      "collateralToken",
      "collateralToken():(address)",
      [],
    )

    return result[0].toAddress()
  }

  try_collateralToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralToken",
      "collateralToken():(address)",
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  exerciseFeeBasisPoints(): i32 {
    let result = super.call(
      "exerciseFeeBasisPoints",
      "exerciseFeeBasisPoints():(uint16)",
      [],
    )

    return result[0].toI32()
  }

  try_exerciseFeeBasisPoints(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "exerciseFeeBasisPoints",
      "exerciseFeeBasisPoints():(uint16)",
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  expirationDate(): BigInt {
    let result = super.call("expirationDate", "expirationDate():(uint256)", [])

    return result[0].toBigInt()
  }

  try_expirationDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expirationDate",
      "expirationDate():(uint256)",
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  getLogicAddress(): Address {
    let result = super.call(
      "getLogicAddress",
      "getLogicAddress():(address)",
      [],
    )

    return result[0].toAddress()
  }

  try_getLogicAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLogicAddress",
      "getLogicAddress():(address)",
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  marketName(): string {
    let result = super.call("marketName", "marketName():(string)", [])

    return result[0].toString()
  }

  try_marketName(): ethereum.CallResult<string> {
    let result = super.tryCall("marketName", "marketName():(string)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  marketStyle(): i32 {
    let result = super.call("marketStyle", "marketStyle():(uint8)", [])

    return result[0].toI32()
  }

  try_marketStyle(): ethereum.CallResult<i32> {
    let result = super.tryCall("marketStyle", "marketStyle():(uint8)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", [])

    return result[0].toAddress()
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", [])

    return result[0].toAddress()
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  priceRatio(): BigInt {
    let result = super.call("priceRatio", "priceRatio():(uint256)", [])

    return result[0].toBigInt()
  }

  try_priceRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceRatio", "priceRatio():(uint256)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", [])

    return result[0].toBytes()
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("proxiableUUID", "proxiableUUID():(bytes32)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBytes())
  }

  restrictedMinter(): Address {
    let result = super.call(
      "restrictedMinter",
      "restrictedMinter():(address)",
      [],
    )

    return result[0].toAddress()
  }

  try_restrictedMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "restrictedMinter",
      "restrictedMinter():(address)",
      [],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  wToken(): Address {
    let result = super.call("wToken", "wToken():(address)", [])

    return result[0].toAddress()
  }

  try_wToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("wToken", "wToken():(address)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  state(): i32 {
    let result = super.call("state", "state():(uint8)", [])

    return result[0].toI32()
  }

  try_state(): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state():(uint8)", [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  calculatePaymentAmount(collateralAmount: BigInt): BigInt {
    let result = super.call(
      "calculatePaymentAmount",
      "calculatePaymentAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(collateralAmount)],
    )

    return result[0].toBigInt()
  }

  try_calculatePaymentAmount(
    collateralAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePaymentAmount",
      "calculatePaymentAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(collateralAmount)],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  calculateFee(amount: BigInt, basisPoints: i32): BigInt {
    let result = super.call(
      "calculateFee",
      "calculateFee(uint256,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(basisPoints)),
      ],
    )

    return result[0].toBigInt()
  }

  try_calculateFee(
    amount: BigInt,
    basisPoints: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateFee",
      "calculateFee(uint256,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(basisPoints)),
      ],
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    let value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this)
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this)
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall

  constructor(call: RenounceOwnershipCall) {
    this._call = call
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall

  constructor(call: RenounceOwnershipCall) {
    this._call = call
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this)
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this)
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall

  constructor(call: TransferOwnershipCall) {
    this._call = call
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall

  constructor(call: TransferOwnershipCall) {
    this._call = call
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this)
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this)
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }

  get _marketName(): string {
    return this._call.inputValues[0].value.toString()
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get _paymentToken(): Address {
    return this._call.inputValues[2].value.toAddress()
  }

  get _marketStyle(): i32 {
    return this._call.inputValues[3].value.toI32()
  }

  get _priceRatio(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }

  get _expirationDate(): BigInt {
    return this._call.inputValues[5].value.toBigInt()
  }

  get _exerciseFeeBasisPoints(): i32 {
    return this._call.inputValues[6].value.toI32()
  }

  get _closeFeeBasisPoints(): i32 {
    return this._call.inputValues[7].value.toI32()
  }

  get _claimFeeBasisPoints(): i32 {
    return this._call.inputValues[8].value.toI32()
  }

  get _tokenImplementation(): Address {
    return this._call.inputValues[9].value.toAddress()
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }
}

export class MintOptionsCall extends ethereum.Call {
  get inputs(): MintOptionsCall__Inputs {
    return new MintOptionsCall__Inputs(this)
  }

  get outputs(): MintOptionsCall__Outputs {
    return new MintOptionsCall__Outputs(this)
  }
}

export class MintOptionsCall__Inputs {
  _call: MintOptionsCall

  constructor(call: MintOptionsCall) {
    this._call = call
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class MintOptionsCall__Outputs {
  _call: MintOptionsCall

  constructor(call: MintOptionsCall) {
    this._call = call
  }
}

export class ExerciseOptionCall extends ethereum.Call {
  get inputs(): ExerciseOptionCall__Inputs {
    return new ExerciseOptionCall__Inputs(this)
  }

  get outputs(): ExerciseOptionCall__Outputs {
    return new ExerciseOptionCall__Outputs(this)
  }
}

export class ExerciseOptionCall__Inputs {
  _call: ExerciseOptionCall

  constructor(call: ExerciseOptionCall) {
    this._call = call
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class ExerciseOptionCall__Outputs {
  _call: ExerciseOptionCall

  constructor(call: ExerciseOptionCall) {
    this._call = call
  }
}

export class ClaimCollateralCall extends ethereum.Call {
  get inputs(): ClaimCollateralCall__Inputs {
    return new ClaimCollateralCall__Inputs(this)
  }

  get outputs(): ClaimCollateralCall__Outputs {
    return new ClaimCollateralCall__Outputs(this)
  }
}

export class ClaimCollateralCall__Inputs {
  _call: ClaimCollateralCall

  constructor(call: ClaimCollateralCall) {
    this._call = call
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class ClaimCollateralCall__Outputs {
  _call: ClaimCollateralCall

  constructor(call: ClaimCollateralCall) {
    this._call = call
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this)
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this)
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall

  constructor(call: ClosePositionCall) {
    this._call = call
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall

  constructor(call: ClosePositionCall) {
    this._call = call
  }
}

export class RecoverTokensCall extends ethereum.Call {
  get inputs(): RecoverTokensCall__Inputs {
    return new RecoverTokensCall__Inputs(this)
  }

  get outputs(): RecoverTokensCall__Outputs {
    return new RecoverTokensCall__Outputs(this)
  }
}

export class RecoverTokensCall__Inputs {
  _call: RecoverTokensCall

  constructor(call: RecoverTokensCall) {
    this._call = call
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class RecoverTokensCall__Outputs {
  _call: RecoverTokensCall

  constructor(call: RecoverTokensCall) {
    this._call = call
  }
}

export class SelfDestructMarketCall extends ethereum.Call {
  get inputs(): SelfDestructMarketCall__Inputs {
    return new SelfDestructMarketCall__Inputs(this)
  }

  get outputs(): SelfDestructMarketCall__Outputs {
    return new SelfDestructMarketCall__Outputs(this)
  }
}

export class SelfDestructMarketCall__Inputs {
  _call: SelfDestructMarketCall

  constructor(call: SelfDestructMarketCall) {
    this._call = call
  }

  get refundAddress(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class SelfDestructMarketCall__Outputs {
  _call: SelfDestructMarketCall

  constructor(call: SelfDestructMarketCall) {
    this._call = call
  }
}

export class UpdateImplementationCall extends ethereum.Call {
  get inputs(): UpdateImplementationCall__Inputs {
    return new UpdateImplementationCall__Inputs(this)
  }

  get outputs(): UpdateImplementationCall__Outputs {
    return new UpdateImplementationCall__Outputs(this)
  }
}

export class UpdateImplementationCall__Inputs {
  _call: UpdateImplementationCall

  constructor(call: UpdateImplementationCall) {
    this._call = call
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class UpdateImplementationCall__Outputs {
  _call: UpdateImplementationCall

  constructor(call: UpdateImplementationCall) {
    this._call = call
  }
}

export class UpdateRestrictedMinterCall extends ethereum.Call {
  get inputs(): UpdateRestrictedMinterCall__Inputs {
    return new UpdateRestrictedMinterCall__Inputs(this)
  }

  get outputs(): UpdateRestrictedMinterCall__Outputs {
    return new UpdateRestrictedMinterCall__Outputs(this)
  }
}

export class UpdateRestrictedMinterCall__Inputs {
  _call: UpdateRestrictedMinterCall

  constructor(call: UpdateRestrictedMinterCall) {
    this._call = call
  }

  get _restrictedMinter(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class UpdateRestrictedMinterCall__Outputs {
  _call: UpdateRestrictedMinterCall

  constructor(call: UpdateRestrictedMinterCall) {
    this._call = call
  }
}
